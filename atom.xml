<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alice</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-30T01:34:16.905Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bug收集</title>
    <link href="http://yoursite.com/2019/01/30/bug%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2019/01/30/bug收集/</id>
    <published>2019-01-30T01:32:44.000Z</published>
    <updated>2019-01-30T01:34:16.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如果项目出现以下报错，别多想，重新新建一个项目，重新装依赖啥的，比你解决这个error要来的快，搞了2个钟都没搞出来的我，心疼自己。。。"><a href="#如果项目出现以下报错，别多想，重新新建一个项目，重新装依赖啥的，比你解决这个error要来的快，搞了2个钟都没搞出来的我，心疼自己。。。" class="headerlink" title="如果项目出现以下报错，别多想，重新新建一个项目，重新装依赖啥的，比你解决这个error要来的快，搞了2个钟都没搞出来的我，心疼自己。。。"></a>如果项目出现以下报错，别多想，重新新建一个项目，重新装依赖啥的，比你解决这个error要来的快，搞了2个钟都没搞出来的我，心疼自己。。。</h2><p><img src="/2019/01/30/bug收集/e01.png" alt="Image text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如果项目出现以下报错，别多想，重新新建一个项目，重新装依赖啥的，比你解决这个error要来的快，搞了2个钟都没搞出来的我，心疼自己。。。&quot;&gt;&lt;a href=&quot;#如果项目出现以下报错，别多想，重新新建一个项目，重新装依赖啥的，比你解决这个error要来的快，搞了2个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS中的require和import区别</title>
    <link href="http://yoursite.com/2019/01/23/JS%E4%B8%AD%E7%9A%84require%E5%92%8Cimport%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/01/23/JS中的require和import区别/</id>
    <published>2019-01-23T04:10:29.000Z</published>
    <updated>2019-01-23T04:13:25.920Z</updated>
    
    <content type="html"><![CDATA[<p>在研究react和webpack的时候，经常看到在js文件中出现require，还有import，这两个都是为了JS模块化编程使用。CSS的是@import<br>原文链接：<a href="https://www.cnblogs.com/liaojie970/p/7376682.html" target="_blank" rel="noopener">JS中的require和import区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在研究react和webpack的时候，经常看到在js文件中出现require，还有import，这两个都是为了JS模块化编程使用。CSS的是@import&lt;br&gt;原文链接：&lt;a href=&quot;https://www.cnblogs.com/liaojie970/p/7376
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>koa随堂笔记</title>
    <link href="http://yoursite.com/2019/01/23/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/01/23/随堂笔记/</id>
    <published>2019-01-23T02:33:28.000Z</published>
    <updated>2019-01-29T07:47:56.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装NVM的时候装出问题的时候，重新卸载，node无法使用的问题"><a href="#装NVM的时候装出问题的时候，重新卸载，node无法使用的问题" class="headerlink" title="装NVM的时候装出问题的时候，重新卸载，node无法使用的问题"></a>装NVM的时候装出问题的时候，重新卸载，node无法使用的问题</h2><p>装NVM的时候装出问题的时候，重新卸载，node无法使用的时候<br>先安装node，再使用node<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install stable /*安装最新版的node*/</span><br><span class="line">$ nvm use 10.15.0 /*版本号*/</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>然后这时候，你会发现webstorm的node使用不了，那是因为node安装的路径变了，得重新在webstorm里更换nodejs的路径<br><img src="/2019/01/23/随堂笔记/e01.png" alt="Image text"><br>然后这时候，你又发现你的hexo命令行又不能使用了，这时候，又要更改下hexo的环境变量<br><img src="/2019/01/23/随堂笔记/e02.png" alt="Image text"><br><img src="/2019/01/23/随堂笔记/e03.png" alt="Image text"></p><h2 id="断言assert"><a href="#断言assert" class="headerlink" title="断言assert"></a>断言assert</h2><p>判断一个代码的执行结果是否符合预期，如果不符合，就打印出检验失败的日志，方便我们在开发代码或运行的代码的时候，去了解<br>个地方代码运行的结果，或运行错误，调用错误，入参不合法。</p><h2 id="vary-好像很叼"><a href="#vary-好像很叼" class="headerlink" title="vary()好像很叼"></a>vary()好像很叼</h2><h2 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h2><p>纯函数：不依赖其他，只有入参和return，非常安全</p><h2 id="koa里面的compose的作用"><a href="#koa里面的compose的作用" class="headerlink" title="koa里面的compose的作用"></a>koa里面的compose的作用</h2><p>koa的compose就是将中间件串联起来运行，当执行next()的时候，就是触发第二个中间件的时候，将执行权交给第二个中间件，所以这就是尾递归<br><img src="/2019/01/23/随堂笔记/e04.png" alt="compose的源码"></p><h2 id="递归调用对堆栈的压力"><a href="#递归调用对堆栈的压力" class="headerlink" title="递归调用对堆栈的压力"></a>递归调用对堆栈的压力</h2><p><img src="/2019/01/23/随堂笔记/e05.png" alt="Image text"><br><img src="/2019/01/23/随堂笔记/e06.png" alt="Image text"></p><h2 id="使用puppeteer做爬虫"><a href="#使用puppeteer做爬虫" class="headerlink" title="使用puppeteer做爬虫"></a>使用puppeteer做爬虫</h2><p>互联网的各种请求其实都是基于各种协议的请求和返回，比如说基于tcp/IP上面的http请求，puppeteer在本地模拟了一个浏览器来请求网页，来爬一下不太好爬的数据，主要是保持主进程的健壮性，分配给了子进程来处理这些事情。</p><h2 id="了解进程的9个问题"><a href="#了解进程的9个问题" class="headerlink" title="了解进程的9个问题"></a>了解进程的9个问题</h2><p><img src="/2019/01/23/随堂笔记/e07.png" alt="Image text"><br>同步异步、阻塞非阻塞<br>如果一个进程在等待另一个进程的完成，这叫做同步阻塞，如果一个进程在等待另一个进程的完成，并且不间断的来轮询这个进程有没有完成，如果这个进程还没完成，他就去做别的事情，这叫做同步非阻塞。这两种情况，等待的进程都是比较被动的，必须自己去轮询在工作的进程是否已经完成<br>如果在进程正在运行的时候，注册一个回调函数，这个进程已经完成，就执行回调，通知另一个进程来执行，这就叫做异步非阻塞<br>如果我已经注册了一个回调函数，但是进程还是在等待另一个进程的完成，这就叫做异步阻塞<br>对于一个系统来说，调用方如果需要被调用方完成手头的事情，并且一直等待他结束，这种调用方式就是同步的，<br>如果调用方不需要一直等待被调用方来响应，那这种调用方式就是异步的，实现这种异步可以通过调用方的主动轮询，也可以通过被调用方的主动通知，<br>也就是执行调用方之前注册号的回调。<br>而阻塞和非阻塞，是指在调用的过程中，调用方在获得消息的状态，如果这个获取是什么都不能做，必须要等待的话，那么就是阻塞，反之就是非阻塞，<br>往往同步的操作会导致阻塞，异步的操作不会发生阻塞，但不是100%如此。<br>一句话收尾：同步异步是过程在于有无消息通知的机制，调用方是主动等待还是被动通知进度，阻塞非阻塞是状态是调用方在获取结果的时候，是干等还是互不干扰，<br>而异步非阻塞就是nodejs的一大卖点<br><a href="https://baijiahao.baidu.com/s?id=1612594086537323804&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">五分钟，捋清同步异步阻塞非阻塞并发并行</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;装NVM的时候装出问题的时候，重新卸载，node无法使用的问题&quot;&gt;&lt;a href=&quot;#装NVM的时候装出问题的时候，重新卸载，node无法使用的问题&quot; class=&quot;headerlink&quot; title=&quot;装NVM的时候装出问题的时候，重新卸载，node无法使用的问题&quot;&gt;&lt;/a&gt;装NVM的时候装出问题的时候，重新卸载，node无法使用的问题&lt;/h2&gt;&lt;p&gt;装NVM的时候装出问题的时候，重新卸载，node无法使用的时候&lt;br&gt;先安装node，再使用node&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ nvm install stable /*安装最新版的node*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ nvm use 10.15.0 /*版本号*/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="webstorm" scheme="http://yoursite.com/tags/webstorm/"/>
    
  </entry>
  
  <entry>
    <title>2019年学习的目标</title>
    <link href="http://yoursite.com/2019/01/21/2019%E5%B9%B4%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%9B%AE%E6%A0%87/"/>
    <id>http://yoursite.com/2019/01/21/2019年学习的目标/</id>
    <published>2019-01-21T01:35:22.000Z</published>
    <updated>2019-01-23T08:51:00.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今年想了解的技能"><a href="#今年想了解的技能" class="headerlink" title="今年想了解的技能"></a>今年想了解的技能</h2><p>从一开始接触微信小程序到后面的taro框架，从一开始接触node到后面的koa框架，GraphQL<br>2018年年底买了一套《你不知道的js》，今年年初也打算看完，并且重复阅读，前端之路走的好漫长。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今年想了解的技能&quot;&gt;&lt;a href=&quot;#今年想了解的技能&quot; class=&quot;headerlink&quot; title=&quot;今年想了解的技能&quot;&gt;&lt;/a&gt;今年想了解的技能&lt;/h2&gt;&lt;p&gt;从一开始接触微信小程序到后面的taro框架，从一开始接触node到后面的koa框架，Grap
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue路由的两种模式hash和history的区别</title>
    <link href="http://yoursite.com/2019/01/15/vue%E8%B7%AF%E7%94%B1%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8Fhash%E5%92%8Chistory%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/01/15/vue路由的两种模式hash和history的区别/</id>
    <published>2019-01-15T03:29:08.590Z</published>
    <updated>2019-01-15T03:36:10.598Z</updated>
    
    <content type="html"><![CDATA[<p>项目遇到问题，用history打包出现问题：hash路由的话，我们只请求了头部#前面的url路径，其余的#后面的，只是我们的前端路由，用来加载不同的组件，我们并不是通过url来请求后台数据的，<br>我们是通过组件的生命周期调用接口，请求后台数据，用history就会产生将整个url都用做http请求，然后向后台请求数据，当页面刷新的时候，用history就会出现404页面查找不到，<br>这个时候就需要后台配置，将所有的情况，都重定向到index.html</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目遇到问题，用history打包出现问题：hash路由的话，我们只请求了头部#前面的url路径，其余的#后面的，只是我们的前端路由，用来加载不同的组件，我们并不是通过url来请求后台数据的，&lt;br&gt;我们是通过组件的生命周期调用接口，请求后台数据，用history就会产生将
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>实战Taro出现的坑</title>
    <link href="http://yoursite.com/2019/01/10/%E5%AE%9E%E6%88%98Taro%E5%87%BA%E7%8E%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2019/01/10/实战Taro出现的坑/</id>
    <published>2019-01-10T03:24:46.789Z</published>
    <updated>2019-01-10T08:45:59.657Z</updated>
    
    <content type="html"><![CDATA[<p>1、不能使用push（非常的不方便）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ /*替换方法*/</span><br><span class="line">$ <span class="built_in">let</span> length=this.state.posts.length</span><br><span class="line">      <span class="built_in">let</span> posts=this.state.posts</span><br><span class="line">      posts[length]=&#123;</span><br><span class="line">          id:1,</span><br><span class="line">          title:<span class="string">'次子大婚'</span>+length,</span><br><span class="line">          date:<span class="string">'2017-12-12 12:30'</span>,</span><br><span class="line">          count:<span class="string">'3655'</span>,</span><br><span class="line">          dateCN:<span class="string">'农历大年初一'</span></span><br><span class="line">        &#125;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">          posts</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></p><p>2、引用本地静态资源，用import进去<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ import searchPng from <span class="string">'../../images/right.png'</span></span><br><span class="line">$  &lt;Image src=&#123;searchPng&#125; className=<span class="string">'right'</span>&gt;&lt;/Image&gt;</span><br></pre></td></tr></table></figure></p><p>3、新增page的时候，需要主动在app.tsx里面添加page页面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、不能使用push（非常的不方便）&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>实战Taro自定义的下拉刷新和上拉加载</title>
    <link href="http://yoursite.com/2019/01/08/%E5%AE%9E%E6%88%98Taro%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%92%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/01/08/实战Taro自定义的下拉刷新和上拉加载/</id>
    <published>2019-01-08T02:29:41.223Z</published>
    <updated>2019-01-30T01:34:42.679Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="http://yoursite.com/2018/12/29/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/12/29/欢迎来到我的博客/</id>
    <published>2018-12-29T02:36:12.000Z</published>
    <updated>2019-01-02T06:37:56.213Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到我的博客&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>实战Taro父子组件的通讯问题</title>
    <link href="http://yoursite.com/2018/12/28/%E5%AE%9E%E6%88%98Taro%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E8%AE%AF%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/12/28/实战Taro父子组件的通讯问题/</id>
    <published>2018-12-28T02:34:41.512Z</published>
    <updated>2019-01-07T08:59:29.855Z</updated>
    
    <content type="html"><![CDATA[<p>其实不叫做父子组件，是page和component之间的通讯，但是想了想，组件也是可以嵌套使用，还是用父子组件来的好</p><h2 id="父组件向子组件传递参数"><a href="#父组件向子组件传递参数" class="headerlink" title="父组件向子组件传递参数"></a>父组件向子组件传递参数</h2><p>主要是通过props来传递属性，暂不细说</p><a id="more"></a><h2 id="子组件触发父组件传递过去的函数"><a href="#子组件触发父组件传递过去的函数" class="headerlink" title="子组件触发父组件传递过去的函数"></a>子组件触发父组件传递过去的函数</h2><p>同样是通过props传递，但是传递的类型不是属性，而是函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ onCallbackParent=&#123;this.goToDetail.bind(this,item)&#125; /*父组件*/</span><br></pre></td></tr></table></figure></p><p>然后在子组件里面触发这个函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ &lt;View className=<span class="string">'list'</span> onClick=&#123;this.props.onCallbackParent&#125;&gt;</span><br><span class="line">$    ...</span><br><span class="line">$ &lt;/View&gt; /*子组件*/</span><br></pre></td></tr></table></figure></p><p>这里需要注意的是：1、父组件传递函数的时候，必须要加上‘on’</p><h2 id="子组件触发父组件传递过去的函数的作用"><a href="#子组件触发父组件传递过去的函数的作用" class="headerlink" title="子组件触发父组件传递过去的函数的作用"></a>子组件触发父组件传递过去的函数的作用</h2><p>主要是为了能够将逻辑都写在父组件里，保证子组件的简单，这样子后期复用性高</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实不叫做父子组件，是page和component之间的通讯，但是想了想，组件也是可以嵌套使用，还是用父子组件来的好&lt;/p&gt;
&lt;h2 id=&quot;父组件向子组件传递参数&quot;&gt;&lt;a href=&quot;#父组件向子组件传递参数&quot; class=&quot;headerlink&quot; title=&quot;父组件向子组件传递参数&quot;&gt;&lt;/a&gt;父组件向子组件传递参数&lt;/h2&gt;&lt;p&gt;主要是通过props来传递属性，暂不细说&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
